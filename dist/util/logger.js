"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LogLevel = void 0;
const util_1 = require("src/util");
var LogLevel;
(function (LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
const logMessage = (type) => {
    return (msg, obj) => {
        if (!exports.logger._shouldLog(type))
            return;
        // eslint-disable-next-line no-console
        console.log(`${type.toUpperCase()}: ${msg}`);
        // eslint-disable-next-line no-console
        if (obj)
            console.log(obj);
    };
};
exports.logger = {
    debug: (msg, obj) => {
        logMessage(LogLevel.DEBUG)(msg, obj);
    },
    info: (msg, obj) => {
        logMessage(LogLevel.INFO)(msg, obj);
    },
    warn: (msg, obj) => {
        logMessage(LogLevel.WARN)(msg, obj);
    },
    error: (msg, obj) => {
        logMessage(LogLevel.ERROR)(msg, obj);
    },
    child: () => exports.logger,
    _logLevelToInt: (logLevel) => {
        switch (logLevel) {
            case LogLevel.ERROR:
                return 0;
            case LogLevel.WARN:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.DEBUG:
                return 4;
            default:
                throw new Error(`Unknown log lever [${logLevel}]`);
        }
    },
    _shouldLog: (currentLevel) => {
        return exports.logger._logLevelToInt(util_1.config.logLevel) >= exports.logger._logLevelToInt(currentLevel);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFpQztBQUVqQyxJQUFZLFFBS1g7QUFMRCxXQUFZLFFBQVE7SUFDbEIsMkJBQWUsQ0FBQTtJQUNmLHlCQUFhLENBQUE7SUFDYix5QkFBYSxDQUFBO0lBQ2IsMkJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTFcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFLbkI7QUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO0lBQ2xDLE9BQU8sQ0FBQyxHQUFXLEVBQUUsR0FBUyxFQUFRLEVBQUU7UUFDdEMsSUFBSSxDQUFDLGNBQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTTtRQUNwQyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQzVDLHNDQUFzQztRQUN0QyxJQUFJLEdBQUc7WUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzNCLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxDQUFDLEdBQVcsRUFBRSxHQUFTLEVBQVEsRUFBRTtRQUN0QyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBVyxFQUFFLEdBQVMsRUFBUSxFQUFFO1FBQ3JDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFXLEVBQUUsR0FBUyxFQUFRLEVBQUU7UUFDckMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUNELEtBQUssRUFBRSxDQUFDLEdBQVcsRUFBRSxHQUFTLEVBQVEsRUFBRTtRQUN0QyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBQ0QsS0FBSyxFQUFFLEdBQVEsRUFBRSxDQUFDLGNBQU07SUFDeEIsY0FBYyxFQUFFLENBQUMsUUFBZ0IsRUFBVSxFQUFFO1FBQzNDLFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO1lBQ1YsS0FBSyxRQUFRLENBQUMsSUFBSTtnQkFDaEIsT0FBTyxDQUFDLENBQUE7WUFDVixLQUFLLFFBQVEsQ0FBQyxJQUFJO2dCQUNoQixPQUFPLENBQUMsQ0FBQTtZQUNWLEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO1lBQ1Y7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsUUFBUSxHQUFHLENBQUMsQ0FBQTtTQUNyRDtJQUNILENBQUM7SUFDRCxVQUFVLEVBQUUsQ0FBQyxZQUFvQixFQUFXLEVBQUU7UUFDNUMsT0FBTyxjQUFNLENBQUMsY0FBYyxDQUFDLGFBQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxjQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RGLENBQUM7Q0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnc3JjL3V0aWwnXG5cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgRVJST1IgPSAnZXJyb3InLFxuICBXQVJOID0gJ3dhcm4nLFxuICBJTkZPID0gJ2luZm8nLFxuICBERUJVRyA9ICdkZWJ1ZycsXG59XG5cbmNvbnN0IGxvZ01lc3NhZ2UgPSAodHlwZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiAobXNnOiBzdHJpbmcsIG9iaj86IGFueSk6IHZvaWQgPT4ge1xuICAgIGlmICghbG9nZ2VyLl9zaG91bGRMb2codHlwZSkpIHJldHVyblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coYCR7dHlwZS50b1VwcGVyQ2FzZSgpfTogJHttc2d9YClcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmIChvYmopIGNvbnNvbGUubG9nKG9iailcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbG9nZ2VyID0ge1xuICBkZWJ1ZzogKG1zZzogc3RyaW5nLCBvYmo/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBsb2dNZXNzYWdlKExvZ0xldmVsLkRFQlVHKShtc2csIG9iailcbiAgfSxcbiAgaW5mbzogKG1zZzogc3RyaW5nLCBvYmo/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBsb2dNZXNzYWdlKExvZ0xldmVsLklORk8pKG1zZywgb2JqKVxuICB9LFxuICB3YXJuOiAobXNnOiBzdHJpbmcsIG9iaj86IGFueSk6IHZvaWQgPT4ge1xuICAgIGxvZ01lc3NhZ2UoTG9nTGV2ZWwuV0FSTikobXNnLCBvYmopXG4gIH0sXG4gIGVycm9yOiAobXNnOiBzdHJpbmcsIG9iaj86IGFueSk6IHZvaWQgPT4ge1xuICAgIGxvZ01lc3NhZ2UoTG9nTGV2ZWwuRVJST1IpKG1zZywgb2JqKVxuICB9LFxuICBjaGlsZDogKCk6IGFueSA9PiBsb2dnZXIsXG4gIF9sb2dMZXZlbFRvSW50OiAobG9nTGV2ZWw6IHN0cmluZyk6IG51bWJlciA9PiB7XG4gICAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgICAgY2FzZSBMb2dMZXZlbC5FUlJPUjpcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIGNhc2UgTG9nTGV2ZWwuV0FSTjpcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIGNhc2UgTG9nTGV2ZWwuSU5GTzpcbiAgICAgICAgcmV0dXJuIDJcbiAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XG4gICAgICAgIHJldHVybiA0XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbG9nIGxldmVyIFske2xvZ0xldmVsfV1gKVxuICAgIH1cbiAgfSxcbiAgX3Nob3VsZExvZzogKGN1cnJlbnRMZXZlbDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIGxvZ2dlci5fbG9nTGV2ZWxUb0ludChjb25maWcubG9nTGV2ZWwpID49IGxvZ2dlci5fbG9nTGV2ZWxUb0ludChjdXJyZW50TGV2ZWwpXG4gIH0sXG59XG4iXX0=