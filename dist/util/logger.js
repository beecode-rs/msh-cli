"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LogLevel = void 0;
const config_1 = require("src/util/config");
var LogLevel;
(function (LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
const logMessage = (type) => {
    return (msg, obj) => {
        if (!exports.logger._shouldLog(type))
            return;
        // eslint-disable-next-line no-console
        console.log(`${type.toUpperCase()}: ${msg}`);
        // eslint-disable-next-line no-console
        if (obj)
            console.log(obj);
    };
};
exports.logger = {
    debug: (msg, obj) => {
        logMessage(LogLevel.DEBUG)(msg, obj);
    },
    info: (msg, obj) => {
        logMessage(LogLevel.INFO)(msg, obj);
    },
    warn: (msg, obj) => {
        logMessage(LogLevel.WARN)(msg, obj);
    },
    error: (msg, obj) => {
        logMessage(LogLevel.ERROR)(msg, obj);
    },
    child: () => exports.logger,
    _logLevelToInt: (logLevel) => {
        switch (logLevel) {
            case LogLevel.ERROR:
                return 0;
            case LogLevel.WARN:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.DEBUG:
                return 3;
            default:
                throw new Error(`Unknown log lever [${logLevel}]`);
        }
    },
    _shouldLog: (currentLevel) => {
        return exports.logger._logLevelToInt(config_1.config.logLevel) >= exports.logger._logLevelToInt(currentLevel);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRDQUF3QztBQUV4QyxJQUFZLFFBS1g7QUFMRCxXQUFZLFFBQVE7SUFDbEIsMkJBQWUsQ0FBQTtJQUNmLHlCQUFhLENBQUE7SUFDYix5QkFBYSxDQUFBO0lBQ2IsMkJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTFcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFLbkI7QUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO0lBQ2xDLE9BQU8sQ0FBQyxHQUFXLEVBQUUsR0FBUyxFQUFRLEVBQUU7UUFDdEMsSUFBSSxDQUFDLGNBQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTTtRQUNwQyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQzVDLHNDQUFzQztRQUN0QyxJQUFJLEdBQUc7WUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzNCLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVZLFFBQUEsTUFBTSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxDQUFDLEdBQVcsRUFBRSxHQUFTLEVBQVEsRUFBRTtRQUN0QyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBQ0QsSUFBSSxFQUFFLENBQUMsR0FBVyxFQUFFLEdBQVMsRUFBUSxFQUFFO1FBQ3JDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFDRCxJQUFJLEVBQUUsQ0FBQyxHQUFXLEVBQUUsR0FBUyxFQUFRLEVBQUU7UUFDckMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUNELEtBQUssRUFBRSxDQUFDLEdBQVcsRUFBRSxHQUFTLEVBQVEsRUFBRTtRQUN0QyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBQ0QsS0FBSyxFQUFFLEdBQVEsRUFBRSxDQUFDLGNBQU07SUFDeEIsY0FBYyxFQUFFLENBQUMsUUFBZ0IsRUFBVSxFQUFFO1FBQzNDLFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO1lBQ1YsS0FBSyxRQUFRLENBQUMsSUFBSTtnQkFDaEIsT0FBTyxDQUFDLENBQUE7WUFDVixLQUFLLFFBQVEsQ0FBQyxJQUFJO2dCQUNoQixPQUFPLENBQUMsQ0FBQTtZQUNWLEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO1lBQ1Y7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsUUFBUSxHQUFHLENBQUMsQ0FBQTtTQUNyRDtJQUNILENBQUM7SUFDRCxVQUFVLEVBQUUsQ0FBQyxZQUFvQixFQUFXLEVBQUU7UUFDNUMsT0FBTyxjQUFNLENBQUMsY0FBYyxDQUFDLGVBQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxjQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RGLENBQUM7Q0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnc3JjL3V0aWwvY29uZmlnJ1xuXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIEVSUk9SID0gJ2Vycm9yJyxcbiAgV0FSTiA9ICd3YXJuJyxcbiAgSU5GTyA9ICdpbmZvJyxcbiAgREVCVUcgPSAnZGVidWcnLFxufVxuXG5jb25zdCBsb2dNZXNzYWdlID0gKHR5cGU6IHN0cmluZykgPT4ge1xuICByZXR1cm4gKG1zZzogc3RyaW5nLCBvYmo/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBpZiAoIWxvZ2dlci5fc2hvdWxkTG9nKHR5cGUpKSByZXR1cm5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKGAke3R5cGUudG9VcHBlckNhc2UoKX06ICR7bXNnfWApXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAob2JqKSBjb25zb2xlLmxvZyhvYmopXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IHtcbiAgZGVidWc6IChtc2c6IHN0cmluZywgb2JqPzogYW55KTogdm9pZCA9PiB7XG4gICAgbG9nTWVzc2FnZShMb2dMZXZlbC5ERUJVRykobXNnLCBvYmopXG4gIH0sXG4gIGluZm86IChtc2c6IHN0cmluZywgb2JqPzogYW55KTogdm9pZCA9PiB7XG4gICAgbG9nTWVzc2FnZShMb2dMZXZlbC5JTkZPKShtc2csIG9iailcbiAgfSxcbiAgd2FybjogKG1zZzogc3RyaW5nLCBvYmo/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBsb2dNZXNzYWdlKExvZ0xldmVsLldBUk4pKG1zZywgb2JqKVxuICB9LFxuICBlcnJvcjogKG1zZzogc3RyaW5nLCBvYmo/OiBhbnkpOiB2b2lkID0+IHtcbiAgICBsb2dNZXNzYWdlKExvZ0xldmVsLkVSUk9SKShtc2csIG9iailcbiAgfSxcbiAgY2hpbGQ6ICgpOiBhbnkgPT4gbG9nZ2VyLFxuICBfbG9nTGV2ZWxUb0ludDogKGxvZ0xldmVsOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIHN3aXRjaCAobG9nTGV2ZWwpIHtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XG4gICAgICAgIHJldHVybiAwXG4gICAgICBjYXNlIExvZ0xldmVsLldBUk46XG4gICAgICAgIHJldHVybiAxXG4gICAgICBjYXNlIExvZ0xldmVsLklORk86XG4gICAgICAgIHJldHVybiAyXG4gICAgICBjYXNlIExvZ0xldmVsLkRFQlVHOlxuICAgICAgICByZXR1cm4gM1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGxvZyBsZXZlciBbJHtsb2dMZXZlbH1dYClcbiAgICB9XG4gIH0sXG4gIF9zaG91bGRMb2c6IChjdXJyZW50TGV2ZWw6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiBsb2dnZXIuX2xvZ0xldmVsVG9JbnQoY29uZmlnLmxvZ0xldmVsKSA+PSBsb2dnZXIuX2xvZ0xldmVsVG9JbnQoY3VycmVudExldmVsKVxuICB9LFxufVxuIl19