"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const dotenv_1 = __importDefault(require("dotenv"));
const env = msh_node_env_1.default();
dotenv_1.default.config({ path: './.msh' });
dotenv_1.default.config({ path: './.msh-user' });
exports.config = Object.freeze({
    rootDir: env('ROOT_DIR').string.default(process.cwd()).required,
    projects: env('PROJECTS').json.default([]).required,
    pullRequestSkip: env('PULL_REQUEST_SKIP').json.default([]).required,
    git: {
        team: env('GIT_TEAM').string.optional,
        projectPrefix: env('GIT_PROJECT_PREFIX').string.optional,
        host: env('GIT_HOST').string.default('bitbucket.org').required,
        username: env('GIT_USERNAME').string.optional,
        password: env('GIT_PASSWORD').string.optional,
    },
    dockerBaseImages: env('DOCKER_BASE_IMAGES').json.default([]).optional,
    cmd: {
        gitEnabled: env('CMD_GIT_ENABLED').boolean.default(true).required,
        cleanEnabled: env('CMD_CLEAN_ENABLED').boolean.default(true).required,
        npmEnabled: env('CMD_NPM_ENABLED').boolean.default(true).required,
        prEnabled: env('CMD_PR_ENABLED').boolean.default(true).required,
    },
    logLevel: env('LOG_LEVEL').string.default('debug').required
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5QyxvREFBMkI7QUFFM0IsTUFBTSxHQUFHLEdBQUcsc0JBQVUsRUFBRSxDQUFBO0FBQ3hCLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDakMsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtBQUV6QixRQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRO0lBQy9ELFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFvQjtJQUMvRCxlQUFlLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRO0lBQ25FLEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFDckMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1FBQ3hELElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRO1FBQzlELFFBQVEsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFDN0MsUUFBUSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUTtLQUM5QztJQUNELGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUTtJQUNyRSxHQUFHLEVBQUU7UUFDSCxVQUFVLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRO1FBQ2pFLFlBQVksRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVE7UUFDckUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUTtRQUNqRSxTQUFTLEVBQUUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRO0tBQ2hFO0lBQ0QsUUFBUSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVE7Q0FDNUQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1zaE5vZGVFbnYgZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtZW52J1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXG5cbmNvbnN0IGVudiA9IE1zaE5vZGVFbnYoKVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy5tc2gnIH0pXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vLm1zaC11c2VyJyB9KVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHJvb3REaXI6IGVudignUk9PVF9ESVInKS5zdHJpbmcuZGVmYXVsdChwcm9jZXNzLmN3ZCgpKS5yZXF1aXJlZCxcbiAgcHJvamVjdHM6IGVudignUFJPSkVDVFMnKS5qc29uLmRlZmF1bHQoW10pLnJlcXVpcmVkIGFzIHN0cmluZ1tdLFxuICBwdWxsUmVxdWVzdFNraXA6IGVudignUFVMTF9SRVFVRVNUX1NLSVAnKS5qc29uLmRlZmF1bHQoW10pLnJlcXVpcmVkLFxuICBnaXQ6IHtcbiAgICB0ZWFtOiBlbnYoJ0dJVF9URUFNJykuc3RyaW5nLm9wdGlvbmFsLFxuICAgIHByb2plY3RQcmVmaXg6IGVudignR0lUX1BST0pFQ1RfUFJFRklYJykuc3RyaW5nLm9wdGlvbmFsLFxuICAgIGhvc3Q6IGVudignR0lUX0hPU1QnKS5zdHJpbmcuZGVmYXVsdCgnYml0YnVja2V0Lm9yZycpLnJlcXVpcmVkLFxuICAgIHVzZXJuYW1lOiBlbnYoJ0dJVF9VU0VSTkFNRScpLnN0cmluZy5vcHRpb25hbCxcbiAgICBwYXNzd29yZDogZW52KCdHSVRfUEFTU1dPUkQnKS5zdHJpbmcub3B0aW9uYWwsXG4gIH0sXG4gIGRvY2tlckJhc2VJbWFnZXM6IGVudignRE9DS0VSX0JBU0VfSU1BR0VTJykuanNvbi5kZWZhdWx0KFtdKS5vcHRpb25hbCxcbiAgY21kOiB7XG4gICAgZ2l0RW5hYmxlZDogZW52KCdDTURfR0lUX0VOQUJMRUQnKS5ib29sZWFuLmRlZmF1bHQodHJ1ZSkucmVxdWlyZWQsXG4gICAgY2xlYW5FbmFibGVkOiBlbnYoJ0NNRF9DTEVBTl9FTkFCTEVEJykuYm9vbGVhbi5kZWZhdWx0KHRydWUpLnJlcXVpcmVkLFxuICAgIG5wbUVuYWJsZWQ6IGVudignQ01EX05QTV9FTkFCTEVEJykuYm9vbGVhbi5kZWZhdWx0KHRydWUpLnJlcXVpcmVkLFxuICAgIHByRW5hYmxlZDogZW52KCdDTURfUFJfRU5BQkxFRCcpLmJvb2xlYW4uZGVmYXVsdCh0cnVlKS5yZXF1aXJlZCxcbiAgfSxcbiAgbG9nTGV2ZWw6IGVudignTE9HX0xFVkVMJykuc3RyaW5nLmRlZmF1bHQoJ2RlYnVnJykucmVxdWlyZWRcbn0pXG4iXX0=