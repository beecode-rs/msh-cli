"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const dotenv_1 = __importDefault(require("dotenv"));
const env = msh_node_env_1.default({ loggerStrategy: new msh_node_log_1.ConsoleLogger(msh_node_log_1.LogLevel.INFO) });
dotenv_1.default.config({ path: './.msh' });
dotenv_1.default.config({ path: './.msh-user' });
exports.config = Object.freeze({
    rootDir: env('ROOT_DIR').string.default(process.cwd()).required,
    projects: env('PROJECTS').json().required,
    pullRequestSkip: env('PULL_REQUEST_SKIP').json().default([]).required,
    git: {
        team: env('GIT_TEAM').string.optional,
        projectPrefix: env('GIT_PROJECT_PREFIX').string.optional,
        host: env('GIT_HOST').string.default('bitbucket.org').required,
        username: env('GIT_USERNAME').string.optional,
        password: env('GIT_PASSWORD').string.optional,
    },
    dockerBaseImages: env('DOCKER_BASE_IMAGES').json().default([]).optional,
    cmd: {
        gitEnabled: env('CMD_GIT_ENABLED').boolean.default(true).required,
        cleanEnabled: env('CMD_CLEAN_ENABLED').boolean.default(false).required,
        npmEnabled: env('CMD_NPM_ENABLED').boolean.default(true).required,
        prEnabled: env('CMD_PR_ENABLED').boolean.default(false).required,
    },
    logLevel: env('LOG_LEVEL').string.default('error').required,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBK0Q7QUFDL0Qsb0RBQTJCO0FBRTNCLE1BQU0sR0FBRyxHQUFHLHNCQUFVLENBQUMsRUFBRSxjQUFjLEVBQUUsSUFBSSw0QkFBYSxDQUFDLHVCQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzVFLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDakMsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtBQUV6QixRQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRO0lBQy9ELFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFZLENBQUMsUUFBUTtJQUNuRCxlQUFlLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxFQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7SUFDL0UsR0FBRyxFQUFFO1FBQ0gsSUFBSSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUNyQyxhQUFhLEVBQUUsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFDeEQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVE7UUFDOUQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUM3QyxRQUFRLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO0tBQzlDO0lBQ0QsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsSUFBSSxFQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7SUFDakYsR0FBRyxFQUFFO1FBQ0gsVUFBVSxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUTtRQUNqRSxZQUFZLEVBQUUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO1FBQ3RFLFVBQVUsRUFBRSxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVE7UUFDakUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtLQUNqRTtJQUNELFFBQVEsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRO0NBQzVELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNc2hOb2RlRW52IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWVudidcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGJlZWNvZGUvbXNoLW5vZGUtbG9nJ1xuaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXG5cbmNvbnN0IGVudiA9IE1zaE5vZGVFbnYoeyBsb2dnZXJTdHJhdGVneTogbmV3IENvbnNvbGVMb2dnZXIoTG9nTGV2ZWwuSU5GTykgfSlcbmRvdGVudi5jb25maWcoeyBwYXRoOiAnLi8ubXNoJyB9KVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy5tc2gtdXNlcicgfSlcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICByb290RGlyOiBlbnYoJ1JPT1RfRElSJykuc3RyaW5nLmRlZmF1bHQocHJvY2Vzcy5jd2QoKSkucmVxdWlyZWQsXG4gIHByb2plY3RzOiBlbnYoJ1BST0pFQ1RTJykuanNvbjxzdHJpbmdbXT4oKS5yZXF1aXJlZCxcbiAgcHVsbFJlcXVlc3RTa2lwOiBlbnYoJ1BVTExfUkVRVUVTVF9TS0lQJykuanNvbjxzdHJpbmdbXT4oKS5kZWZhdWx0KFtdKS5yZXF1aXJlZCxcbiAgZ2l0OiB7XG4gICAgdGVhbTogZW52KCdHSVRfVEVBTScpLnN0cmluZy5vcHRpb25hbCxcbiAgICBwcm9qZWN0UHJlZml4OiBlbnYoJ0dJVF9QUk9KRUNUX1BSRUZJWCcpLnN0cmluZy5vcHRpb25hbCxcbiAgICBob3N0OiBlbnYoJ0dJVF9IT1NUJykuc3RyaW5nLmRlZmF1bHQoJ2JpdGJ1Y2tldC5vcmcnKS5yZXF1aXJlZCxcbiAgICB1c2VybmFtZTogZW52KCdHSVRfVVNFUk5BTUUnKS5zdHJpbmcub3B0aW9uYWwsXG4gICAgcGFzc3dvcmQ6IGVudignR0lUX1BBU1NXT1JEJykuc3RyaW5nLm9wdGlvbmFsLFxuICB9LFxuICBkb2NrZXJCYXNlSW1hZ2VzOiBlbnYoJ0RPQ0tFUl9CQVNFX0lNQUdFUycpLmpzb248c3RyaW5nW10+KCkuZGVmYXVsdChbXSkub3B0aW9uYWwsXG4gIGNtZDoge1xuICAgIGdpdEVuYWJsZWQ6IGVudignQ01EX0dJVF9FTkFCTEVEJykuYm9vbGVhbi5kZWZhdWx0KHRydWUpLnJlcXVpcmVkLFxuICAgIGNsZWFuRW5hYmxlZDogZW52KCdDTURfQ0xFQU5fRU5BQkxFRCcpLmJvb2xlYW4uZGVmYXVsdChmYWxzZSkucmVxdWlyZWQsXG4gICAgbnBtRW5hYmxlZDogZW52KCdDTURfTlBNX0VOQUJMRUQnKS5ib29sZWFuLmRlZmF1bHQodHJ1ZSkucmVxdWlyZWQsXG4gICAgcHJFbmFibGVkOiBlbnYoJ0NNRF9QUl9FTkFCTEVEJykuYm9vbGVhbi5kZWZhdWx0KGZhbHNlKS5yZXF1aXJlZCxcbiAgfSxcbiAgbG9nTGV2ZWw6IGVudignTE9HX0xFVkVMJykuc3RyaW5nLmRlZmF1bHQoJ2Vycm9yJykucmVxdWlyZWQsXG59KVxuIl19