"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const msh_node_env_1 = __importDefault(require("@beecode/msh-node-env"));
const msh_node_log_1 = require("@beecode/msh-node-log");
const dotenv_1 = __importDefault(require("dotenv"));
const env = msh_node_env_1.default({ loggerStrategy: new msh_node_log_1.ConsoleLogger(msh_node_log_1.LogLevelType.INFO) });
dotenv_1.default.config({ path: './.msh' });
dotenv_1.default.config({ path: './.msh-user' });
exports.config = Object.freeze({
    rootDir: env('ROOT_DIR').string.default(process.cwd()).required,
    projects: env('PROJECTS').json().default([]).required,
    pullRequestSkip: env('PULL_REQUEST_SKIP').json().default([]).required,
    git: {
        team: env('GIT_TEAM').string.optional,
        projectPrefix: env('GIT_PROJECT_PREFIX').string.optional,
        host: env('GIT_HOST').string.default('bitbucket.org').required,
        username: env('GIT_USERNAME').string.optional,
        password: env('GIT_PASSWORD').string.optional,
    },
    // dockerBaseImages: env('DOCKER_BASE_IMAGES').json<string[]>().default([]).optional,
    cmd: {
        gitEnabled: env('CMD_GIT_ENABLED').boolean.default(true).required,
        // cleanEnabled: env('CMD_CLEAN_ENABLED').boolean.default(false).required,
        npmEnabled: env('CMD_NPM_ENABLED').boolean.default(true).required,
        // prEnabled: env('CMD_PR_ENABLED').boolean.default(false).required,
    },
    logLevel: env('LOG_LEVEL').string.default('error').required,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHlFQUE4QztBQUM5Qyx3REFBbUU7QUFDbkUsb0RBQTJCO0FBRTNCLE1BQU0sR0FBRyxHQUFHLHNCQUFVLENBQUMsRUFBRSxjQUFjLEVBQUUsSUFBSSw0QkFBYSxDQUFDLDJCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2hGLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDakMsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQTtBQUV6QixRQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xDLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRO0lBQy9ELFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVE7SUFDL0QsZUFBZSxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksRUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRO0lBQy9FLEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFDckMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1FBQ3hELElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRO1FBQzlELFFBQVEsRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFDN0MsUUFBUSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUTtLQUM5QztJQUNELHFGQUFxRjtJQUNyRixHQUFHLEVBQUU7UUFDSCxVQUFVLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRO1FBQ2pFLDBFQUEwRTtRQUMxRSxVQUFVLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRO1FBQ2pFLG9FQUFvRTtLQUNyRTtJQUNELFFBQVEsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRO0NBQzVELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNc2hOb2RlRW52IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWVudidcbmltcG9ydCB7IENvbnNvbGVMb2dnZXIsIExvZ0xldmVsVHlwZSB9IGZyb20gJ0BiZWVjb2RlL21zaC1ub2RlLWxvZydcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52J1xuXG5jb25zdCBlbnYgPSBNc2hOb2RlRW52KHsgbG9nZ2VyU3RyYXRlZ3k6IG5ldyBDb25zb2xlTG9nZ2VyKExvZ0xldmVsVHlwZS5JTkZPKSB9KVxuZG90ZW52LmNvbmZpZyh7IHBhdGg6ICcuLy5tc2gnIH0pXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vLm1zaC11c2VyJyB9KVxuXG5leHBvcnQgY29uc3QgY29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHJvb3REaXI6IGVudignUk9PVF9ESVInKS5zdHJpbmcuZGVmYXVsdChwcm9jZXNzLmN3ZCgpKS5yZXF1aXJlZCxcbiAgcHJvamVjdHM6IGVudignUFJPSkVDVFMnKS5qc29uPHN0cmluZ1tdPigpLmRlZmF1bHQoW10pLnJlcXVpcmVkLFxuICBwdWxsUmVxdWVzdFNraXA6IGVudignUFVMTF9SRVFVRVNUX1NLSVAnKS5qc29uPHN0cmluZ1tdPigpLmRlZmF1bHQoW10pLnJlcXVpcmVkLFxuICBnaXQ6IHtcbiAgICB0ZWFtOiBlbnYoJ0dJVF9URUFNJykuc3RyaW5nLm9wdGlvbmFsLFxuICAgIHByb2plY3RQcmVmaXg6IGVudignR0lUX1BST0pFQ1RfUFJFRklYJykuc3RyaW5nLm9wdGlvbmFsLFxuICAgIGhvc3Q6IGVudignR0lUX0hPU1QnKS5zdHJpbmcuZGVmYXVsdCgnYml0YnVja2V0Lm9yZycpLnJlcXVpcmVkLFxuICAgIHVzZXJuYW1lOiBlbnYoJ0dJVF9VU0VSTkFNRScpLnN0cmluZy5vcHRpb25hbCxcbiAgICBwYXNzd29yZDogZW52KCdHSVRfUEFTU1dPUkQnKS5zdHJpbmcub3B0aW9uYWwsXG4gIH0sXG4gIC8vIGRvY2tlckJhc2VJbWFnZXM6IGVudignRE9DS0VSX0JBU0VfSU1BR0VTJykuanNvbjxzdHJpbmdbXT4oKS5kZWZhdWx0KFtdKS5vcHRpb25hbCxcbiAgY21kOiB7XG4gICAgZ2l0RW5hYmxlZDogZW52KCdDTURfR0lUX0VOQUJMRUQnKS5ib29sZWFuLmRlZmF1bHQodHJ1ZSkucmVxdWlyZWQsXG4gICAgLy8gY2xlYW5FbmFibGVkOiBlbnYoJ0NNRF9DTEVBTl9FTkFCTEVEJykuYm9vbGVhbi5kZWZhdWx0KGZhbHNlKS5yZXF1aXJlZCxcbiAgICBucG1FbmFibGVkOiBlbnYoJ0NNRF9OUE1fRU5BQkxFRCcpLmJvb2xlYW4uZGVmYXVsdCh0cnVlKS5yZXF1aXJlZCxcbiAgICAvLyBwckVuYWJsZWQ6IGVudignQ01EX1BSX0VOQUJMRUQnKS5ib29sZWFuLmRlZmF1bHQoZmFsc2UpLnJlcXVpcmVkLFxuICB9LFxuICBsb2dMZXZlbDogZW52KCdMT0dfTEVWRUwnKS5zdHJpbmcuZGVmYXVsdCgnZXJyb3InKS5yZXF1aXJlZCxcbn0pXG4iXX0=