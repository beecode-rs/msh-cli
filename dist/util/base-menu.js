import inquirer from 'inquirer';
export class BaseMenu {
    __name = '__menu';
    __type = 'list';
    __message = '';
    __menu;
    async __execute(command) {
        // @ts-expect-error test
        await this[command]();
        // if (cliService.exitAfterCommandExecuted) process.exit()
        await this.run();
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(message, choices, exitChoices) {
        if (message) {
            this.__message = message;
        }
        choices.push(new inquirer.Separator());
        (exitChoices ?? []).forEach((choice) => {
            choices.push(choice);
        });
        choices.push({ name: 'Exit', value: 'exit' });
        this.__menu = {
            choices: [...choices],
            message: this.__message,
            name: this.__name,
            type: this.__type,
        };
    }
    async run(preSelected) {
        const selected = await this._getSelectedValue(preSelected);
        switch (selected) {
            case 'exit':
                process.exit();
                break;
            default:
                await this.__execute(selected);
        }
    }
    async _getSelectedValue(perSelected) {
        if (perSelected) {
            return perSelected;
        }
        return (await inquirer.prompt(this.__menu))[this.__name];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1tZW51LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvYmFzZS1tZW51LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBbUMsTUFBTSxVQUFVLENBQUE7QUFFMUQsTUFBTSxPQUFnQixRQUFRO0lBQ3JCLE1BQU0sR0FBRyxRQUFRLENBQUE7SUFDakIsTUFBTSxHQUFHLE1BQU0sQ0FBQTtJQUNmLFNBQVMsR0FBRyxFQUFFLENBQUE7SUFDZCxNQUFNLENBQWtCO0lBRXhCLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBZTtRQUN0Qyx3QkFBd0I7UUFDeEIsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNyQiwwREFBMEQ7UUFDMUQsTUFBTSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDakIsQ0FBQztJQUVELDhEQUE4RDtJQUM5RCxZQUFzQixPQUFlLEVBQUUsT0FBYyxFQUFFLFdBQW1CO1FBQ3pFLElBQUksT0FBTyxFQUFFLENBQUM7WUFDYixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQTtRQUN6QixDQUFDO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUNyQztRQUFBLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDckIsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ2IsT0FBTyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7WUFDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDRyxDQUFBO0lBQ3RCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQW9CO1FBQzdCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzFELFFBQVEsUUFBUSxFQUFFLENBQUM7WUFDbEIsS0FBSyxNQUFNO2dCQUNWLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtnQkFDZCxNQUFLO1lBQ047Z0JBQ0MsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hDLENBQUM7SUFDRixDQUFDO0lBRVMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFdBQW9CO1FBQ3JELElBQUksV0FBVyxFQUFFLENBQUM7WUFDakIsT0FBTyxXQUFXLENBQUE7UUFDbkIsQ0FBQztRQUVELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3pELENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbnF1aXJlciwgeyB0eXBlIERpc3RpbmN0UXVlc3Rpb24gfSBmcm9tICdpbnF1aXJlcidcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VNZW51IHtcblx0cHJpdmF0ZSBfX25hbWUgPSAnX19tZW51J1xuXHRwcml2YXRlIF9fdHlwZSA9ICdsaXN0J1xuXHRwcml2YXRlIF9fbWVzc2FnZSA9ICcnXG5cdHByaXZhdGUgX19tZW51OiBEaXN0aW5jdFF1ZXN0aW9uXG5cblx0cHJpdmF0ZSBhc3luYyBfX2V4ZWN1dGUoY29tbWFuZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciB0ZXN0XG5cdFx0YXdhaXQgdGhpc1tjb21tYW5kXSgpXG5cdFx0Ly8gaWYgKGNsaVNlcnZpY2UuZXhpdEFmdGVyQ29tbWFuZEV4ZWN1dGVkKSBwcm9jZXNzLmV4aXQoKVxuXHRcdGF3YWl0IHRoaXMucnVuKClcblx0fVxuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5cdHByb3RlY3RlZCBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIGNob2ljZXM6IGFueVtdLCBleGl0Q2hvaWNlcz86IGFueVtdKSB7XG5cdFx0aWYgKG1lc3NhZ2UpIHtcblx0XHRcdHRoaXMuX19tZXNzYWdlID0gbWVzc2FnZVxuXHRcdH1cblx0XHRjaG9pY2VzLnB1c2gobmV3IGlucXVpcmVyLlNlcGFyYXRvcigpKVxuXHRcdDsoZXhpdENob2ljZXMgPz8gW10pLmZvckVhY2goKGNob2ljZSkgPT4ge1xuXHRcdFx0Y2hvaWNlcy5wdXNoKGNob2ljZSlcblx0XHR9KVxuXG5cdFx0Y2hvaWNlcy5wdXNoKHsgbmFtZTogJ0V4aXQnLCB2YWx1ZTogJ2V4aXQnIH0pXG5cdFx0dGhpcy5fX21lbnUgPSB7XG5cdFx0XHRjaG9pY2VzOiBbLi4uY2hvaWNlc10sXG5cdFx0XHRtZXNzYWdlOiB0aGlzLl9fbWVzc2FnZSxcblx0XHRcdG5hbWU6IHRoaXMuX19uYW1lLFxuXHRcdFx0dHlwZTogdGhpcy5fX3R5cGUsXG5cdFx0fSBhcyBEaXN0aW5jdFF1ZXN0aW9uXG5cdH1cblxuXHRhc3luYyBydW4ocHJlU2VsZWN0ZWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRjb25zdCBzZWxlY3RlZCA9IGF3YWl0IHRoaXMuX2dldFNlbGVjdGVkVmFsdWUocHJlU2VsZWN0ZWQpXG5cdFx0c3dpdGNoIChzZWxlY3RlZCkge1xuXHRcdFx0Y2FzZSAnZXhpdCc6XG5cdFx0XHRcdHByb2Nlc3MuZXhpdCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRhd2FpdCB0aGlzLl9fZXhlY3V0ZShzZWxlY3RlZClcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgYXN5bmMgX2dldFNlbGVjdGVkVmFsdWUocGVyU2VsZWN0ZWQ/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGlmIChwZXJTZWxlY3RlZCkge1xuXHRcdFx0cmV0dXJuIHBlclNlbGVjdGVkXG5cdFx0fVxuXG5cdFx0cmV0dXJuIChhd2FpdCBpbnF1aXJlci5wcm9tcHQodGhpcy5fX21lbnUpKVt0aGlzLl9fbmFtZV1cblx0fVxufVxuIl19