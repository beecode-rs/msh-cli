import chalk from 'chalk';
import { shellDal } from '#src/dal/shell-dal';
// TODO refactor object and use class instead
export const shellService = {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    _joinResults: (results) => {
        return results.reduce((agg, cur) => {
            agg = Object.assign(agg, cur);
            return agg;
        }, {});
    },
    cd: shellDal.cd,
    exec: shellDal.exec,
    print: shellDal.print,
    printError: (message) => {
        shellDal.print(chalk.red(message));
    },
    printStdMessage: (...messageArgs) => {
        const messages = shellService._joinResults(messageArgs);
        Object.entries(messages).forEach(([name, { stdout, stderr }]) => {
            const borderChar = '#';
            const borderStars = Array(name.length + 6)
                .fill('')
                .map(() => borderChar)
                .join('');
            shellService.print(borderStars);
            shellService.print(`${borderChar}  ${name}  ${borderChar}`);
            shellService.print(borderStars);
            if (stdout.trim() !== '') {
                stdout.split('\n').forEach((msg) => shellService.print(msg));
            }
            if (stderr.trim() !== '') {
                stderr.split('\n').forEach((msg) => shellService.printError(msg));
            }
        });
    },
    printSuccess: (message) => {
        shellDal.print(chalk.green(message));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlbGwtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlL3NoZWxsLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBRXpCLE9BQU8sRUFBbUIsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFJOUQsNkNBQTZDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUMzQixnRUFBZ0U7SUFDaEUsWUFBWSxFQUFFLENBQUMsT0FBMEIsRUFBbUIsRUFBRTtRQUM3RCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ25ELEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUU3QixPQUFPLEdBQUcsQ0FBQTtRQUNYLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNQLENBQUM7SUFDRCxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUU7SUFDZixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7SUFDbkIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO0lBQ3JCLFVBQVUsRUFBRSxDQUFDLE9BQWUsRUFBUSxFQUFFO1FBQ3JDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFDRCxlQUFlLEVBQUUsQ0FBQyxHQUFHLFdBQThCLEVBQVEsRUFBRTtRQUM1RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRXZELE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9ELE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQTtZQUN0QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7aUJBQ3hDLElBQUksQ0FBQyxFQUFFLENBQUM7aUJBQ1IsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztpQkFDckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ1YsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUMvQixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxLQUFLLElBQUksS0FBSyxVQUFVLEVBQUUsQ0FBQyxDQUFBO1lBQzNELFlBQVksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7WUFFL0IsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDN0QsQ0FBQztZQUNELElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO2dCQUMxQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQ2xFLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7SUFDRCxZQUFZLEVBQUUsQ0FBQyxPQUFlLEVBQVEsRUFBRTtRQUN2QyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0NBQ0QsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tICdjaGFsaydcblxuaW1wb3J0IHsgdHlwZSBFeGVjUmVzdWx0LCBzaGVsbERhbCB9IGZyb20gJyNzcmMvZGFsL3NoZWxsLWRhbCdcblxuZXhwb3J0IHR5cGUgUHJpbnRTdGRNZXNzYWdlID0gUmVjb3JkPHN0cmluZywgRXhlY1Jlc3VsdD5cblxuLy8gVE9ETyByZWZhY3RvciBvYmplY3QgYW5kIHVzZSBjbGFzcyBpbnN0ZWFkXG5leHBvcnQgY29uc3Qgc2hlbGxTZXJ2aWNlID0ge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5cdF9qb2luUmVzdWx0czogKHJlc3VsdHM6IFByaW50U3RkTWVzc2FnZVtdKTogUHJpbnRTdGRNZXNzYWdlID0+IHtcblx0XHRyZXR1cm4gcmVzdWx0cy5yZWR1Y2U8UHJpbnRTdGRNZXNzYWdlPigoYWdnLCBjdXIpID0+IHtcblx0XHRcdGFnZyA9IE9iamVjdC5hc3NpZ24oYWdnLCBjdXIpXG5cblx0XHRcdHJldHVybiBhZ2dcblx0XHR9LCB7fSlcblx0fSxcblx0Y2Q6IHNoZWxsRGFsLmNkLFxuXHRleGVjOiBzaGVsbERhbC5leGVjLFxuXHRwcmludDogc2hlbGxEYWwucHJpbnQsXG5cdHByaW50RXJyb3I6IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcblx0XHRzaGVsbERhbC5wcmludChjaGFsay5yZWQobWVzc2FnZSkpXG5cdH0sXG5cdHByaW50U3RkTWVzc2FnZTogKC4uLm1lc3NhZ2VBcmdzOiBQcmludFN0ZE1lc3NhZ2VbXSk6IHZvaWQgPT4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzID0gc2hlbGxTZXJ2aWNlLl9qb2luUmVzdWx0cyhtZXNzYWdlQXJncylcblxuXHRcdE9iamVjdC5lbnRyaWVzKG1lc3NhZ2VzKS5mb3JFYWNoKChbbmFtZSwgeyBzdGRvdXQsIHN0ZGVyciB9XSkgPT4ge1xuXHRcdFx0Y29uc3QgYm9yZGVyQ2hhciA9ICcjJ1xuXHRcdFx0Y29uc3QgYm9yZGVyU3RhcnMgPSBBcnJheShuYW1lLmxlbmd0aCArIDYpXG5cdFx0XHRcdC5maWxsKCcnKVxuXHRcdFx0XHQubWFwKCgpID0+IGJvcmRlckNoYXIpXG5cdFx0XHRcdC5qb2luKCcnKVxuXHRcdFx0c2hlbGxTZXJ2aWNlLnByaW50KGJvcmRlclN0YXJzKVxuXHRcdFx0c2hlbGxTZXJ2aWNlLnByaW50KGAke2JvcmRlckNoYXJ9ICAke25hbWV9ICAke2JvcmRlckNoYXJ9YClcblx0XHRcdHNoZWxsU2VydmljZS5wcmludChib3JkZXJTdGFycylcblxuXHRcdFx0aWYgKHN0ZG91dC50cmltKCkgIT09ICcnKSB7XG5cdFx0XHRcdHN0ZG91dC5zcGxpdCgnXFxuJykuZm9yRWFjaCgobXNnKSA9PiBzaGVsbFNlcnZpY2UucHJpbnQobXNnKSlcblx0XHRcdH1cblx0XHRcdGlmIChzdGRlcnIudHJpbSgpICE9PSAnJykge1xuXHRcdFx0XHRzdGRlcnIuc3BsaXQoJ1xcbicpLmZvckVhY2goKG1zZykgPT4gc2hlbGxTZXJ2aWNlLnByaW50RXJyb3IobXNnKSlcblx0XHRcdH1cblx0XHR9KVxuXHR9LFxuXHRwcmludFN1Y2Nlc3M6IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcblx0XHRzaGVsbERhbC5wcmludChjaGFsay5ncmVlbihtZXNzYWdlKSlcblx0fSxcbn1cbiJdfQ==