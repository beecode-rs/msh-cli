import chalk from 'chalk';
import { shellDal } from '#src/dal/shell-dal';
// TODO refactor object and use class instead
export const shellService = {
    _joinResults: (results) => {
        return results.reduce((agg, cur) => {
            agg = Object.assign(agg, cur);
            return agg;
        }, {});
    },
    cd: shellDal.cd,
    exec: shellDal.exec,
    print: shellDal.print,
    printError: (message) => {
        shellDal.print(chalk.red(message));
    },
    printStdMessage: (...messageArgs) => {
        const messages = shellService._joinResults(messageArgs);
        Object.entries(messages).forEach(([name, { stdout, stderr }]) => {
            const borderChar = '#';
            const borderStars = Array(name.length + 6)
                .fill('')
                .map(() => borderChar)
                .join('');
            shellService.print(borderStars);
            shellService.print(`${borderChar}  ${name}  ${borderChar}`);
            shellService.print(borderStars);
            if (stdout.trim() !== '') {
                stdout.split('\n').forEach((msg) => shellService.print(msg));
            }
            if (stderr.trim() !== '') {
                stderr.split('\n').forEach((msg) => {
                    shellService.printError(msg);
                });
            }
        });
    },
    printSuccess: (message) => {
        shellDal.print(chalk.green(message));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlbGwtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlL3NoZWxsLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBRXpCLE9BQU8sRUFBbUIsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFJOUQsNkNBQTZDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUMzQixZQUFZLEVBQUUsQ0FBQyxPQUEwQixFQUFtQixFQUFFO1FBQzdELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkQsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBRTdCLE9BQU8sR0FBRyxDQUFBO1FBQ1gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ1AsQ0FBQztJQUNELEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRTtJQUNmLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtJQUNuQixLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDckIsVUFBVSxFQUFFLENBQUMsT0FBZSxFQUFRLEVBQUU7UUFDckMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUNELGVBQWUsRUFBRSxDQUFDLEdBQUcsV0FBOEIsRUFBUSxFQUFFO1FBQzVELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7UUFFdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0QsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFBO1lBQ3RCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztpQkFDeEMsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDUixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO2lCQUNyQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDVixZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQy9CLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLEtBQUssSUFBSSxLQUFLLFVBQVUsRUFBRSxDQUFDLENBQUE7WUFDM0QsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUUvQixJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztnQkFDMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUM3RCxDQUFDO1lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ2xDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQzdCLENBQUMsQ0FBQyxDQUFBO1lBQ0gsQ0FBQztRQUNGLENBQUMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUNELFlBQVksRUFBRSxDQUFDLE9BQWUsRUFBUSxFQUFFO1FBQ3ZDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7Q0FDRCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJ1xuXG5pbXBvcnQgeyB0eXBlIEV4ZWNSZXN1bHQsIHNoZWxsRGFsIH0gZnJvbSAnI3NyYy9kYWwvc2hlbGwtZGFsJ1xuXG5leHBvcnQgdHlwZSBQcmludFN0ZE1lc3NhZ2UgPSBSZWNvcmQ8c3RyaW5nLCBFeGVjUmVzdWx0PlxuXG4vLyBUT0RPIHJlZmFjdG9yIG9iamVjdCBhbmQgdXNlIGNsYXNzIGluc3RlYWRcbmV4cG9ydCBjb25zdCBzaGVsbFNlcnZpY2UgPSB7XG5cdF9qb2luUmVzdWx0czogKHJlc3VsdHM6IFByaW50U3RkTWVzc2FnZVtdKTogUHJpbnRTdGRNZXNzYWdlID0+IHtcblx0XHRyZXR1cm4gcmVzdWx0cy5yZWR1Y2U8UHJpbnRTdGRNZXNzYWdlPigoYWdnLCBjdXIpID0+IHtcblx0XHRcdGFnZyA9IE9iamVjdC5hc3NpZ24oYWdnLCBjdXIpXG5cblx0XHRcdHJldHVybiBhZ2dcblx0XHR9LCB7fSlcblx0fSxcblx0Y2Q6IHNoZWxsRGFsLmNkLFxuXHRleGVjOiBzaGVsbERhbC5leGVjLFxuXHRwcmludDogc2hlbGxEYWwucHJpbnQsXG5cdHByaW50RXJyb3I6IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcblx0XHRzaGVsbERhbC5wcmludChjaGFsay5yZWQobWVzc2FnZSkpXG5cdH0sXG5cdHByaW50U3RkTWVzc2FnZTogKC4uLm1lc3NhZ2VBcmdzOiBQcmludFN0ZE1lc3NhZ2VbXSk6IHZvaWQgPT4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzID0gc2hlbGxTZXJ2aWNlLl9qb2luUmVzdWx0cyhtZXNzYWdlQXJncylcblxuXHRcdE9iamVjdC5lbnRyaWVzKG1lc3NhZ2VzKS5mb3JFYWNoKChbbmFtZSwgeyBzdGRvdXQsIHN0ZGVyciB9XSkgPT4ge1xuXHRcdFx0Y29uc3QgYm9yZGVyQ2hhciA9ICcjJ1xuXHRcdFx0Y29uc3QgYm9yZGVyU3RhcnMgPSBBcnJheShuYW1lLmxlbmd0aCArIDYpXG5cdFx0XHRcdC5maWxsKCcnKVxuXHRcdFx0XHQubWFwKCgpID0+IGJvcmRlckNoYXIpXG5cdFx0XHRcdC5qb2luKCcnKVxuXHRcdFx0c2hlbGxTZXJ2aWNlLnByaW50KGJvcmRlclN0YXJzKVxuXHRcdFx0c2hlbGxTZXJ2aWNlLnByaW50KGAke2JvcmRlckNoYXJ9ICAke25hbWV9ICAke2JvcmRlckNoYXJ9YClcblx0XHRcdHNoZWxsU2VydmljZS5wcmludChib3JkZXJTdGFycylcblxuXHRcdFx0aWYgKHN0ZG91dC50cmltKCkgIT09ICcnKSB7XG5cdFx0XHRcdHN0ZG91dC5zcGxpdCgnXFxuJykuZm9yRWFjaCgobXNnKSA9PiBzaGVsbFNlcnZpY2UucHJpbnQobXNnKSlcblx0XHRcdH1cblx0XHRcdGlmIChzdGRlcnIudHJpbSgpICE9PSAnJykge1xuXHRcdFx0XHRzdGRlcnIuc3BsaXQoJ1xcbicpLmZvckVhY2goKG1zZykgPT4ge1xuXHRcdFx0XHRcdHNoZWxsU2VydmljZS5wcmludEVycm9yKG1zZylcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9KVxuXHR9LFxuXHRwcmludFN1Y2Nlc3M6IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcblx0XHRzaGVsbERhbC5wcmludChjaGFsay5ncmVlbihtZXNzYWdlKSlcblx0fSxcbn1cbiJdfQ==