import { fs } from 'mz';
import path from 'path';
import { config } from '#src/util/config';
export const initConfigService = {
    configDefaultValue: () => [
        '# ROOT_DIR - [optional] default is the folder where msh is executed',
        '#ROOT_DIR=',
        '',
        '# PROJECT - [required] ex: ["auth","auth-web","node-common",...]',
        'PROJECTS=[]',
        '',
        '# GIT_TEAM - [required] git team name',
        '#GIT_TEAM=',
        '',
        '# GIT_PROJECT_PREFIX - [optional] ex: msh // if project is msh-node-env you can use node-env in PROJECT',
        '#GIT_PROJECT_PREFIX=',
        // 'PULL_REQUEST_SKIP=[] # ["type-definitions","node-common",...]',
        // 'DOCKER_BASE_IMAGES=[] # ["bc-node-nginx","bc-node","bc-nginx","bc-base"]',
        '',
        '#CMD_GIT_ENABLED=true',
        '#CMD_NPM_ENABLED=true',
        // 'CMD_CLEAN_ENABLED=true',
        // 'CMD_PR_ENABLED=true',
        '',
        '#LOG_LEVEL=error',
        '',
        '## move to .msh-user',
        '#GIT_USERNAME=',
        '#GIT_PASSWORD=',
    ].join('\n'),
    configFileExists: () => fs.existsSync(initConfigService.configFileLocation()),
    configFileLocation: () => path.join(config().rootDir, '.msh'),
    tryToCreateConfig: async () => {
        if (initConfigService.configFileExists()) {
            throw new Error('Config already exists');
        }
        await fs.writeFile(initConfigService.configFileLocation(), initConfigService.configDefaultValue());
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC1jb25maWctc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlL2luaXQtY29uZmlnLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLElBQUksQ0FBQTtBQUN2QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUE7QUFFdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQ2hDLGtCQUFrQixFQUFFLEdBQVcsRUFBRSxDQUNoQztRQUNDLHFFQUFxRTtRQUNyRSxZQUFZO1FBQ1osRUFBRTtRQUNGLGtFQUFrRTtRQUNsRSxhQUFhO1FBQ2IsRUFBRTtRQUNGLHVDQUF1QztRQUN2QyxZQUFZO1FBQ1osRUFBRTtRQUNGLHlHQUF5RztRQUN6RyxzQkFBc0I7UUFDdEIsbUVBQW1FO1FBQ25FLDhFQUE4RTtRQUM5RSxFQUFFO1FBQ0YsdUJBQXVCO1FBQ3ZCLHVCQUF1QjtRQUN2Qiw0QkFBNEI7UUFDNUIseUJBQXlCO1FBQ3pCLEVBQUU7UUFDRixrQkFBa0I7UUFDbEIsRUFBRTtRQUNGLHNCQUFzQjtRQUN0QixnQkFBZ0I7UUFDaEIsZ0JBQWdCO0tBQ2hCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUViLGdCQUFnQixFQUFFLEdBQVksRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUV0RixrQkFBa0IsRUFBRSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7SUFFckUsaUJBQWlCLEVBQUUsS0FBSyxJQUFtQixFQUFFO1FBQzVDLElBQUksaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1lBQzFDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBQ0QsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLEVBQUUsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFBO0lBQ25HLENBQUM7Q0FDRCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMgfSBmcm9tICdteidcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJyNzcmMvdXRpbC9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBpbml0Q29uZmlnU2VydmljZSA9IHtcblx0Y29uZmlnRGVmYXVsdFZhbHVlOiAoKTogc3RyaW5nID0+XG5cdFx0W1xuXHRcdFx0JyMgUk9PVF9ESVIgLSBbb3B0aW9uYWxdIGRlZmF1bHQgaXMgdGhlIGZvbGRlciB3aGVyZSBtc2ggaXMgZXhlY3V0ZWQnLFxuXHRcdFx0JyNST09UX0RJUj0nLFxuXHRcdFx0JycsXG5cdFx0XHQnIyBQUk9KRUNUIC0gW3JlcXVpcmVkXSBleDogW1wiYXV0aFwiLFwiYXV0aC13ZWJcIixcIm5vZGUtY29tbW9uXCIsLi4uXScsXG5cdFx0XHQnUFJPSkVDVFM9W10nLFxuXHRcdFx0JycsXG5cdFx0XHQnIyBHSVRfVEVBTSAtIFtyZXF1aXJlZF0gZ2l0IHRlYW0gbmFtZScsXG5cdFx0XHQnI0dJVF9URUFNPScsXG5cdFx0XHQnJyxcblx0XHRcdCcjIEdJVF9QUk9KRUNUX1BSRUZJWCAtIFtvcHRpb25hbF0gZXg6IG1zaCAvLyBpZiBwcm9qZWN0IGlzIG1zaC1ub2RlLWVudiB5b3UgY2FuIHVzZSBub2RlLWVudiBpbiBQUk9KRUNUJyxcblx0XHRcdCcjR0lUX1BST0pFQ1RfUFJFRklYPScsXG5cdFx0XHQvLyAnUFVMTF9SRVFVRVNUX1NLSVA9W10gIyBbXCJ0eXBlLWRlZmluaXRpb25zXCIsXCJub2RlLWNvbW1vblwiLC4uLl0nLFxuXHRcdFx0Ly8gJ0RPQ0tFUl9CQVNFX0lNQUdFUz1bXSAjIFtcImJjLW5vZGUtbmdpbnhcIixcImJjLW5vZGVcIixcImJjLW5naW54XCIsXCJiYy1iYXNlXCJdJyxcblx0XHRcdCcnLFxuXHRcdFx0JyNDTURfR0lUX0VOQUJMRUQ9dHJ1ZScsXG5cdFx0XHQnI0NNRF9OUE1fRU5BQkxFRD10cnVlJyxcblx0XHRcdC8vICdDTURfQ0xFQU5fRU5BQkxFRD10cnVlJyxcblx0XHRcdC8vICdDTURfUFJfRU5BQkxFRD10cnVlJyxcblx0XHRcdCcnLFxuXHRcdFx0JyNMT0dfTEVWRUw9ZXJyb3InLFxuXHRcdFx0JycsXG5cdFx0XHQnIyMgbW92ZSB0byAubXNoLXVzZXInLFxuXHRcdFx0JyNHSVRfVVNFUk5BTUU9Jyxcblx0XHRcdCcjR0lUX1BBU1NXT1JEPScsXG5cdFx0XS5qb2luKCdcXG4nKSxcblxuXHRjb25maWdGaWxlRXhpc3RzOiAoKTogYm9vbGVhbiA9PiBmcy5leGlzdHNTeW5jKGluaXRDb25maWdTZXJ2aWNlLmNvbmZpZ0ZpbGVMb2NhdGlvbigpKSxcblxuXHRjb25maWdGaWxlTG9jYXRpb246ICgpOiBzdHJpbmcgPT4gcGF0aC5qb2luKGNvbmZpZygpLnJvb3REaXIsICcubXNoJyksXG5cblx0dHJ5VG9DcmVhdGVDb25maWc6IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHRpZiAoaW5pdENvbmZpZ1NlcnZpY2UuY29uZmlnRmlsZUV4aXN0cygpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZyBhbHJlYWR5IGV4aXN0cycpXG5cdFx0fVxuXHRcdGF3YWl0IGZzLndyaXRlRmlsZShpbml0Q29uZmlnU2VydmljZS5jb25maWdGaWxlTG9jYXRpb24oKSwgaW5pdENvbmZpZ1NlcnZpY2UuY29uZmlnRGVmYXVsdFZhbHVlKCkpXG5cdH0sXG59XG4iXX0=