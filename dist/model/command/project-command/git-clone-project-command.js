import { shellService } from '#src/service/shell-service';
import { config } from '#src/util/config';
export class GitCloneProjectCommand {
    _rootDir;
    _gitHost;
    _gitTeam;
    _projectPrefix;
    constructor(params) {
        const { gitHost = config().git.host, gitTeam = config().git.team, projectPrefix = config().git.projectPrefix ?? '', rootDir = config().rootDir, } = params ?? {};
        if (!gitTeam) {
            throw new Error('You need to specify GIT_TEAM env variable');
        }
        this._rootDir = rootDir;
        this._gitHost = gitHost;
        this._gitTeam = gitTeam;
        this._projectPrefix = projectPrefix;
    }
    async execute(project) {
        try {
            const gitProject = [this._projectPrefix, project].filter(Boolean).join('-');
            const cmd = `git clone git@${this._gitHost}:${this._gitTeam}/${gitProject}.git ${project}`;
            const result = await shellService.exec(cmd);
            return [{ errorMessage: result.stderr, name: project, stringResult: result.stdout }];
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (err) {
            return [{ errorMessage: err.message }];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LWNsb25lLXByb2plY3QtY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbC9jb21tYW5kL3Byb2plY3QtY29tbWFuZC9naXQtY2xvbmUtcHJvamVjdC1jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFekMsTUFBTSxPQUFPLHNCQUFzQjtJQUNmLFFBQVEsQ0FBUTtJQUNoQixRQUFRLENBQVE7SUFDaEIsUUFBUSxDQUFRO0lBQ2hCLGNBQWMsQ0FBUTtJQUV6QyxZQUFZLE1BQXlGO1FBQ3BHLE1BQU0sRUFDTCxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFDM0IsT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQzNCLGFBQWEsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEVBQUUsRUFDaEQsT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sR0FDMUIsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQTtRQUM3RCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7UUFDdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUE7SUFDcEMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZTtRQUM1QixJQUFJLENBQUM7WUFDSixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMzRSxNQUFNLEdBQUcsR0FBRyxpQkFBaUIsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFVBQVUsUUFBUSxPQUFPLEVBQUUsQ0FBQTtZQUMxRixNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFFM0MsT0FBTyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7WUFDcEYsOERBQThEO1FBQy9ELENBQUM7UUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUN2QyxDQUFDO0lBQ0YsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBFeGVjdXRlUmVzdWx0LCB0eXBlIFByb2plY3RFeGVjdXRhYmxlIH0gZnJvbSAnI3NyYy9tb2RlbC9jb21tYW5kL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBzaGVsbFNlcnZpY2UgfSBmcm9tICcjc3JjL3NlcnZpY2Uvc2hlbGwtc2VydmljZSdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJyNzcmMvdXRpbC9jb25maWcnXG5cbmV4cG9ydCBjbGFzcyBHaXRDbG9uZVByb2plY3RDb21tYW5kIGltcGxlbWVudHMgUHJvamVjdEV4ZWN1dGFibGUge1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX3Jvb3REaXI6IHN0cmluZ1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2dpdEhvc3Q6IHN0cmluZ1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2dpdFRlYW06IHN0cmluZ1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX3Byb2plY3RQcmVmaXg6IHN0cmluZ1xuXG5cdGNvbnN0cnVjdG9yKHBhcmFtcz86IHsgcm9vdERpcj86IHN0cmluZzsgZ2l0SG9zdD86IHN0cmluZzsgZ2l0VGVhbT86IHN0cmluZzsgcHJvamVjdFByZWZpeD86IHN0cmluZyB9KSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0Z2l0SG9zdCA9IGNvbmZpZygpLmdpdC5ob3N0LFxuXHRcdFx0Z2l0VGVhbSA9IGNvbmZpZygpLmdpdC50ZWFtLFxuXHRcdFx0cHJvamVjdFByZWZpeCA9IGNvbmZpZygpLmdpdC5wcm9qZWN0UHJlZml4ID8/ICcnLFxuXHRcdFx0cm9vdERpciA9IGNvbmZpZygpLnJvb3REaXIsXG5cdFx0fSA9IHBhcmFtcyA/PyB7fVxuXHRcdGlmICghZ2l0VGVhbSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IEdJVF9URUFNIGVudiB2YXJpYWJsZScpXG5cdFx0fVxuXHRcdHRoaXMuX3Jvb3REaXIgPSByb290RGlyXG5cdFx0dGhpcy5fZ2l0SG9zdCA9IGdpdEhvc3Rcblx0XHR0aGlzLl9naXRUZWFtID0gZ2l0VGVhbVxuXHRcdHRoaXMuX3Byb2plY3RQcmVmaXggPSBwcm9qZWN0UHJlZml4XG5cdH1cblxuXHRhc3luYyBleGVjdXRlKHByb2plY3Q6IHN0cmluZyk6IFByb21pc2U8RXhlY3V0ZVJlc3VsdFtdPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGdpdFByb2plY3QgPSBbdGhpcy5fcHJvamVjdFByZWZpeCwgcHJvamVjdF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy0nKVxuXHRcdFx0Y29uc3QgY21kID0gYGdpdCBjbG9uZSBnaXRAJHt0aGlzLl9naXRIb3N0fToke3RoaXMuX2dpdFRlYW19LyR7Z2l0UHJvamVjdH0uZ2l0ICR7cHJvamVjdH1gXG5cdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBzaGVsbFNlcnZpY2UuZXhlYyhjbWQpXG5cblx0XHRcdHJldHVybiBbeyBlcnJvck1lc3NhZ2U6IHJlc3VsdC5zdGRlcnIsIG5hbWU6IHByb2plY3QsIHN0cmluZ1Jlc3VsdDogcmVzdWx0LnN0ZG91dCB9XVxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0XHR9IGNhdGNoIChlcnI6IGFueSkge1xuXHRcdFx0cmV0dXJuIFt7IGVycm9yTWVzc2FnZTogZXJyLm1lc3NhZ2UgfV1cblx0XHR9XG5cdH1cbn1cbiJdfQ==