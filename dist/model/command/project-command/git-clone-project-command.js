"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitCloneProjectCommand = void 0;
const shell_service_1 = require("src/service/shell-service");
const config_1 = require("src/util/config");
class GitCloneProjectCommand {
    _rootDir;
    _gitHost;
    _gitTeam;
    _projectPrefix;
    constructor(params) {
        const { gitHost = (0, config_1.config)().git.host, gitTeam = (0, config_1.config)().git.team, projectPrefix = (0, config_1.config)().git.projectPrefix ?? '', rootDir = (0, config_1.config)().rootDir, } = params ?? {};
        if (!gitTeam)
            throw new Error('You need to specify GIT_TEAM env variable');
        this._rootDir = rootDir;
        this._gitHost = gitHost;
        this._gitTeam = gitTeam;
        this._projectPrefix = projectPrefix;
    }
    async execute(project) {
        try {
            const gitProject = [this._projectPrefix, project].filter(Boolean).join('-');
            const cmd = `git clone git@${this._gitHost}:${this._gitTeam}/${gitProject}.git ${project}`;
            const result = await shell_service_1.shellService.exec(cmd);
            return [{ name: project, stringResult: result.stdout, errorMessage: result.stderr }];
        }
        catch (err) {
            return [{ errorMessage: err.message }];
        }
    }
}
exports.GitCloneProjectCommand = GitCloneProjectCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LWNsb25lLXByb2plY3QtY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbC9jb21tYW5kL3Byb2plY3QtY29tbWFuZC9naXQtY2xvbmUtcHJvamVjdC1jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZEQUF3RDtBQUN4RCw0Q0FBd0M7QUFFeEMsTUFBYSxzQkFBc0I7SUFDZCxRQUFRLENBQVE7SUFDaEIsUUFBUSxDQUFRO0lBQ2hCLFFBQVEsQ0FBUTtJQUNoQixjQUFjLENBQVE7SUFFekMsWUFBWSxNQUF5RjtRQUNuRyxNQUFNLEVBQ0osT0FBTyxHQUFHLElBQUEsZUFBTSxHQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFDM0IsT0FBTyxHQUFHLElBQUEsZUFBTSxHQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFDM0IsYUFBYSxHQUFHLElBQUEsZUFBTSxHQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxFQUFFLEVBQ2hELE9BQU8sR0FBRyxJQUFBLGVBQU0sR0FBRSxDQUFDLE9BQU8sR0FDM0IsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFBO1FBQzFFLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFBO0lBQ3JDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWU7UUFDbEMsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNFLE1BQU0sR0FBRyxHQUFHLGlCQUFpQixJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksVUFBVSxRQUFRLE9BQU8sRUFBRSxDQUFBO1lBQzFGLE1BQU0sTUFBTSxHQUFHLE1BQU0sNEJBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDM0MsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7U0FDckY7UUFBQyxPQUFPLEdBQVEsRUFBRTtZQUNqQixPQUFPLENBQUMsRUFBRSxZQUFZLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDdkM7SUFDSCxDQUFDO0NBQ0Y7QUE5QkQsd0RBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0ZVJlc3VsdCwgUHJvamVjdEV4ZWN1dGFibGUgfSBmcm9tICdzcmMvbW9kZWwvY29tbWFuZC9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgc2hlbGxTZXJ2aWNlIH0gZnJvbSAnc3JjL3NlcnZpY2Uvc2hlbGwtc2VydmljZSdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ3NyYy91dGlsL2NvbmZpZydcblxuZXhwb3J0IGNsYXNzIEdpdENsb25lUHJvamVjdENvbW1hbmQgaW1wbGVtZW50cyBQcm9qZWN0RXhlY3V0YWJsZSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfcm9vdERpcjogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfZ2l0SG9zdDogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfZ2l0VGVhbTogc3RyaW5nXG4gIHByb3RlY3RlZCByZWFkb25seSBfcHJvamVjdFByZWZpeDogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IocGFyYW1zPzogeyByb290RGlyPzogc3RyaW5nOyBnaXRIb3N0Pzogc3RyaW5nOyBnaXRUZWFtPzogc3RyaW5nOyBwcm9qZWN0UHJlZml4Pzogc3RyaW5nIH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBnaXRIb3N0ID0gY29uZmlnKCkuZ2l0Lmhvc3QsXG4gICAgICBnaXRUZWFtID0gY29uZmlnKCkuZ2l0LnRlYW0sXG4gICAgICBwcm9qZWN0UHJlZml4ID0gY29uZmlnKCkuZ2l0LnByb2plY3RQcmVmaXggPz8gJycsXG4gICAgICByb290RGlyID0gY29uZmlnKCkucm9vdERpcixcbiAgICB9ID0gcGFyYW1zID8/IHt9XG4gICAgaWYgKCFnaXRUZWFtKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHNwZWNpZnkgR0lUX1RFQU0gZW52IHZhcmlhYmxlJylcbiAgICB0aGlzLl9yb290RGlyID0gcm9vdERpclxuICAgIHRoaXMuX2dpdEhvc3QgPSBnaXRIb3N0XG4gICAgdGhpcy5fZ2l0VGVhbSA9IGdpdFRlYW1cbiAgICB0aGlzLl9wcm9qZWN0UHJlZml4ID0gcHJvamVjdFByZWZpeFxuICB9XG5cbiAgcHVibGljIGFzeW5jIGV4ZWN1dGUocHJvamVjdDogc3RyaW5nKTogUHJvbWlzZTxFeGVjdXRlUmVzdWx0W10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZ2l0UHJvamVjdCA9IFt0aGlzLl9wcm9qZWN0UHJlZml4LCBwcm9qZWN0XS5maWx0ZXIoQm9vbGVhbikuam9pbignLScpXG4gICAgICBjb25zdCBjbWQgPSBgZ2l0IGNsb25lIGdpdEAke3RoaXMuX2dpdEhvc3R9OiR7dGhpcy5fZ2l0VGVhbX0vJHtnaXRQcm9qZWN0fS5naXQgJHtwcm9qZWN0fWBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNoZWxsU2VydmljZS5leGVjKGNtZClcbiAgICAgIHJldHVybiBbeyBuYW1lOiBwcm9qZWN0LCBzdHJpbmdSZXN1bHQ6IHJlc3VsdC5zdGRvdXQsIGVycm9yTWVzc2FnZTogcmVzdWx0LnN0ZGVyciB9XVxuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICByZXR1cm4gW3sgZXJyb3JNZXNzYWdlOiBlcnIubWVzc2FnZSB9XVxuICAgIH1cbiAgfVxufVxuIl19